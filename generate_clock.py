#!/usr/bin/env python3
"""
Poker Clock Generator
Generates a static HTML page with embedded CSS and JavaScript for a poker tournament clock.
Supports multiple configuration files for different tournament types.
"""

import yaml
import json
import os
import glob
import re


def load_config(config_file='config.yml'):
    """Load tournament configuration from YAML file."""
    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
            if not config or 'rounds' not in config:
                raise ValueError("Configuration must contain 'rounds' key")
            if not config['rounds']:
                raise ValueError("Configuration must contain at least one round")
            return config
    except FileNotFoundError:
        raise FileNotFoundError(f"Configuration file '{config_file}' not found")
    except yaml.YAMLError as e:
        raise ValueError(f"Invalid YAML in configuration file: {e}")


def generate_clock_html(config, config_name='Tournament'):
    """Generate the complete HTML page with embedded CSS and JavaScript for a poker clock."""
    
    # Convert duration from minutes to seconds for each round
    rounds_with_seconds = []
    for round_config in config['rounds']:
        round_data = round_config.copy()
        duration_minutes = round_config['duration']
        
        # Validate duration is a positive number
        if not isinstance(duration_minutes, (int, float)) or duration_minutes <= 0:
            raise ValueError(f"Invalid duration for round {round_config.get('number', 'unknown')}: "
                           f"duration must be a positive number, got {duration_minutes}")
        
        round_data['duration'] = duration_minutes * 60  # Convert minutes to seconds
        rounds_with_seconds.append(round_data)
    
    rounds_json = json.dumps(rounds_with_seconds)
    
    html_content = f"""<!DOCTYPE html>
<!-- 
    GENERATED FILE - DO NOT EDIT DIRECTLY
    This file is generated by generate_clock.py from a config file
    To modify the tournament configuration, edit the config file and regenerate
-->
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{config_name} - Poker Tournament Clock</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}

        body {{
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
            padding: 20px;
        }}

        .main-layout {{
            display: flex;
            width: 100%;
            max-width: 1600px;
            height: 100%;
            gap: 30px;
            align-items: center;
        }}

        .rounds-table {{
            flex: 0 0 300px;
            height: 80vh;
            overflow-y: auto;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 20px;
            backdrop-filter: blur(10px);
        }}

        .rounds-table h2 {{
            font-size: 2rem;
            margin-bottom: 20px;
            text-align: center;
            border-bottom: 2px solid rgba(255, 255, 255, 0.3);
            padding-bottom: 10px;
        }}

        .round-item {{
            padding: 12px 15px;
            margin-bottom: 10px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 5px;
            border-left: 4px solid transparent;
            transition: all 0.3s ease;
        }}

        .round-item.active {{
            background: rgba(255, 255, 255, 0.2);
            border-left-color: #00ff00;
            box-shadow: 0 0 10px rgba(0, 255, 0, 0.3);
        }}

        .round-item.completed {{
            opacity: 0.5;
        }}

        .round-item.completed .round-item-name {{
            text-decoration: line-through;
        }}

        .round-item-number {{
            font-size: 0.9rem;
            opacity: 0.7;
            margin-bottom: 5px;
        }}

        .round-item-name {{
            font-size: 1.3rem;
            font-weight: bold;
        }}

        .round-item-duration {{
            font-size: 0.9rem;
            opacity: 0.7;
            margin-top: 5px;
        }}

        .container {{
            flex: 1;
            text-align: center;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }}

        /* Responsive design */
        @media (max-width: 1024px) {{
            .main-layout {{
                flex-direction: column;
                gap: 20px;
            }}

            .rounds-table {{
                flex: 0 0 auto;
                width: 100%;
                height: 200px;
                max-height: 30vh;
            }}

            .rounds-table h2 {{
                font-size: 1.5rem;
            }}

            .round-item {{
                display: inline-block;
                width: calc(33.333% - 10px);
                margin-right: 10px;
                vertical-align: top;
            }}

            .round-item-name {{
                font-size: 1rem;
            }}
        }}

        @media (max-width: 768px) {{
            .round-item {{
                width: calc(50% - 10px);
            }}

            .rounds-table {{
                height: 150px;
            }}
        }}

        @media (max-width: 480px) {{
            .round-item {{
                width: 100%;
                margin-right: 0;
            }}
        }}

        .round-info {{
            margin-bottom: 30px;
        }}

        .round-number {{
            font-size: 3rem;
            opacity: 0.8;
            margin-bottom: 10px;
        }}

        .round-name {{
            font-size: 5rem;
            font-weight: bold;
            margin-bottom: 20px;
        }}

        .timer {{
            font-size: 12rem;
            font-weight: bold;
            font-family: 'Courier New', monospace;
            line-height: 1;
            margin: 40px 0;
            text-shadow: 0 0 20px rgba(255, 255, 255, 0.3);
            transition: all 0.3s ease;
        }}

        .timer.warning {{
            color: #ffa500;
            animation: pulse 1s ease-in-out infinite;
        }}

        .timer.final-countdown {{
            color: #ff4444;
            animation: flash 0.5s ease-in-out infinite;
        }}

        @keyframes pulse {{
            0%, 100% {{
                transform: scale(1);
            }}
            50% {{
                transform: scale(1.05);
            }}
        }}

        @keyframes flash {{
            0%, 100% {{
                opacity: 1;
            }}
            50% {{
                opacity: 0.3;
            }}
        }}

        .controls {{
            margin-top: 30px;
            font-size: 1.5rem;
            opacity: 0.7;
        }}

        .status {{
            margin-top: 20px;
            font-size: 2rem;
            font-weight: bold;
        }}

        .status.paused {{
            color: #ffa500;
        }}

        .status.running {{
            color: #00ff00;
        }}

        .next-round {{
            margin-top: 30px;
            font-size: 1.5rem;
            opacity: 0.6;
        }}

        .break-indicator {{
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a6f 100%);
        }}

        .instructions {{
            margin-top: 30px;
            font-size: 1.2rem;
            opacity: 0.5;
            text-align: center;
        }}
    </style>
</head>
<body>
    <div class="main-layout">
        <div class="rounds-table" id="roundsTable">
            <h2>Tournament Rounds</h2>
            <div id="roundsList"></div>
        </div>

        <div class="container">
            <div class="round-info">
                <div class="round-number" id="roundNumber">Round 1</div>
                <div class="round-name" id="roundName">Loading...</div>
            </div>
            
            <div class="timer" id="timer">00:00:00</div>
            
            <div class="status paused" id="status">PAUSED</div>
            
            <div class="next-round" id="nextRound"></div>
            
            <div class="instructions">
                Press SPACEBAR to Start/Pause | Press ENTER to Advance Round
            </div>
        </div>
    </div>

    <script>
        // Tournament configuration
        const rounds = {rounds_json};
        
        // State management
        let currentRoundIndex = 0;
        let timeRemaining = 0;
        let isRunning = false;
        let timerInterval = null;

        // DOM elements
        const timerElement = document.getElementById('timer');
        const statusElement = document.getElementById('status');
        const roundNumberElement = document.getElementById('roundNumber');
        const roundNameElement = document.getElementById('roundName');
        const nextRoundElement = document.getElementById('nextRound');
        const roundsListElement = document.getElementById('roundsList');

        // Completed rounds tracking
        let completedRounds = new Set();

        // Format time as HH:MM:SS
        function formatTime(seconds) {{
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = seconds % 60;
            
            return [hours, minutes, secs]
                .map(v => v.toString().padStart(2, '0'))
                .join(':');
        }}

        // Format duration for display (MM:SS for short durations, HH:MM for longer)
        function formatDuration(seconds) {{
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            
            if (hours > 0) {{
                return `${{hours}}h ${{minutes}}m`;
            }}
            return `${{minutes}}m`;
        }}

        // Initialize rounds table
        function initRoundsTable() {{
            roundsListElement.innerHTML = '';
            rounds.forEach((round, index) => {{
                const roundItem = document.createElement('div');
                roundItem.className = 'round-item';
                roundItem.id = `round-item-${{index}}`;
                roundItem.innerHTML = `
                    <div class="round-item-number">Round ${{round.number}}</div>
                    <div class="round-item-name">${{round.name}}</div>
                    <div class="round-item-duration">${{formatDuration(round.duration)}}</div>
                `;
                roundsListElement.appendChild(roundItem);
            }});
        }}

        // Update rounds table to highlight current and mark completed
        function updateRoundsTable() {{
            rounds.forEach((round, index) => {{
                const roundItem = document.getElementById(`round-item-${{index}}`);
                if (roundItem) {{
                    roundItem.classList.remove('active', 'completed');
                    
                    if (completedRounds.has(index)) {{
                        roundItem.classList.add('completed');
                    }}
                    
                    if (index === currentRoundIndex) {{
                        roundItem.classList.add('active');
                    }}
                }}
            }});
        }}

        // Update the display
        function updateDisplay() {{
            const currentRound = rounds[currentRoundIndex];
            
            // Update round info
            roundNumberElement.textContent = `Round ${{currentRound.number}}`;
            roundNameElement.textContent = currentRound.name;
            
            // Update timer
            timerElement.textContent = formatTime(timeRemaining);
            
            // Update visual indicators based on time remaining
            timerElement.classList.remove('warning', 'final-countdown');
            
            if (timeRemaining <= 10 && timeRemaining > 0) {{
                timerElement.classList.add('final-countdown');
            }} else if (timeRemaining <= 120 && timeRemaining > 10) {{
                timerElement.classList.add('warning');
            }}
            
            // Update body background for breaks
            if (currentRound.is_break) {{
                document.body.style.background = 'linear-gradient(135deg, #ff6b6b 0%, #ee5a6f 100%)';
            }} else {{
                document.body.style.background = 'linear-gradient(135deg, #1e3c72 0%, #2a5298 100%)';
            }}
            
            // Show next round info
            if (currentRoundIndex < rounds.length - 1) {{
                const nextRound = rounds[currentRoundIndex + 1];
                nextRoundElement.textContent = `Next: ${{nextRound.name}}`;
            }} else {{
                nextRoundElement.textContent = 'Final Round';
            }}

            // Update rounds table
            updateRoundsTable();
        }}

        // Move to next round (common logic)
        function moveToNextRound() {{
            // Mark current round as completed
            completedRounds.add(currentRoundIndex);
            
            if (currentRoundIndex < rounds.length - 1) {{
                currentRoundIndex++;
                timeRemaining = rounds[currentRoundIndex].duration;
                updateDisplay();
                return true;
            }} else {{
                // Tournament finished
                stopTimer();
                statusElement.textContent = 'TOURNAMENT COMPLETE';
                statusElement.className = 'status';
                return false;
            }}
        }}

        // Start the next round (auto-advance, keeps timer running)
        function startNextRound() {{
            moveToNextRound();
        }}

        // Advance to next round manually (Enter key, pauses timer)
        function advanceToNextRound() {{
            if (moveToNextRound()) {{
                // Pause the timer after manual advance
                stopTimer();
            }}
        }}

        // Timer tick function
        function tick() {{
            if (timeRemaining > 0) {{
                timeRemaining--;
                updateDisplay();
            }} else {{
                // Round finished, start next round
                startNextRound();
            }}
        }}

        // Start the timer
        function startTimer() {{
            if (!isRunning) {{
                isRunning = true;
                statusElement.textContent = 'RUNNING';
                statusElement.className = 'status running';
                timerInterval = setInterval(tick, 1000);
            }}
        }}

        // Stop the timer
        function stopTimer() {{
            if (isRunning) {{
                isRunning = false;
                statusElement.textContent = 'PAUSED';
                statusElement.className = 'status paused';
                clearInterval(timerInterval);
            }}
        }}

        // Toggle timer
        function toggleTimer() {{
            if (isRunning) {{
                stopTimer();
            }} else {{
                startTimer();
            }}
        }}

        // Keyboard event listener
        document.addEventListener('keydown', (event) => {{
            if (event.code === 'Space') {{
                event.preventDefault();
                toggleTimer();
            }} else if (event.code === 'Enter') {{
                event.preventDefault();
                advanceToNextRound();
            }}
        }});

        // Initialize the clock
        function init() {{
            currentRoundIndex = 0;
            timeRemaining = rounds[0].duration;
            initRoundsTable();
            updateDisplay();
        }}

        // Start the application
        init();
    </script>
</body>
</html>
"""
    
    return html_content


def find_config_files():
    """Find all config-*.yml files in the current directory (up to 10)."""
    config_files = glob.glob('config-*.yml')
    config_files.sort()  # Sort alphabetically
    
    # Limit to 10 config files
    if len(config_files) > 10:
        print(f"Warning: Found {len(config_files)} config files, limiting to first 10")
        config_files = config_files[:10]
    
    return config_files


def get_config_name(config_file):
    """Extract a human-readable name from a config filename.
    
    Examples:
        config-tourney.yml -> Tourney
        config-league.yml -> League
        config-fast-game.yml -> Fast Game
    """
    # Extract the part between 'config-' and '.yml'
    match = re.match(r'config-(.+)\.yml', config_file)
    if match:
        name_part = match.group(1)
        # Convert hyphens to spaces and capitalize each word
        return ' '.join(word.capitalize() for word in name_part.split('-'))
    return 'Tournament'


def generate_index_html(config_files):
    """Generate the index page with links to all tournament clock pages."""
    
    # Build the links list
    links_html = []
    for config_file in config_files:
        config_name = get_config_name(config_file)
        # Generate output filename: config-tourney.yml -> clock-tourney.html
        output_file = config_file.replace('config-', 'clock-').replace('.yml', '.html')
        links_html.append(f'                <a href="{output_file}" class="clock-link">{config_name}</a>')
    
    links_section = '\n'.join(links_html)
    
    html_content = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Poker Tournament Clocks</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}

        body {{
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }}

        .container {{
            text-align: center;
            max-width: 800px;
            width: 100%;
        }}

        h1 {{
            font-size: 4rem;
            margin-bottom: 20px;
            text-shadow: 0 0 20px rgba(255, 255, 255, 0.3);
        }}

        .subtitle {{
            font-size: 1.5rem;
            margin-bottom: 50px;
            opacity: 0.8;
        }}

        .links-container {{
            display: flex;
            flex-direction: column;
            gap: 20px;
            align-items: center;
        }}

        .clock-link {{
            display: block;
            width: 100%;
            max-width: 500px;
            padding: 30px 40px;
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 15px;
            color: white;
            text-decoration: none;
            font-size: 2rem;
            font-weight: bold;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }}

        .clock-link:hover {{
            background: rgba(255, 255, 255, 0.2);
            border-color: rgba(255, 255, 255, 0.6);
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }}

        .footer {{
            margin-top: 60px;
            font-size: 1rem;
            opacity: 0.6;
        }}

        @media (max-width: 768px) {{
            h1 {{
                font-size: 2.5rem;
            }}

            .subtitle {{
                font-size: 1.2rem;
            }}

            .clock-link {{
                font-size: 1.5rem;
                padding: 20px 30px;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>Poker Tournament Clocks</h1>
        <div class="subtitle">Select a tournament type</div>
        
        <div class="links-container">
{links_section}
        </div>

        <div class="footer">
            Press SPACEBAR to start/pause | Press ENTER to advance round
        </div>
    </div>
</body>
</html>
"""
    
    return html_content


def main():
    """Main function to generate the poker clock HTML files."""
    # Find all config files
    config_files = find_config_files()
    
    if not config_files:
        print("No config-*.yml files found. Please create at least one config file.")
        print("Example: config-tourney.yml, config-league.yml")
        return
    
    print(f"Found {len(config_files)} configuration file(s):")
    for config_file in config_files:
        print(f"  - {config_file}")
    
    # Generate a clock page for each config file
    for config_file in config_files:
        config_name = get_config_name(config_file)
        print(f"\nProcessing {config_file} ({config_name})...")
        
        try:
            config = load_config(config_file)
            print(f"  Loaded {len(config['rounds'])} rounds")
            
            html = generate_clock_html(config, config_name)
            
            # Generate output filename: config-tourney.yml -> clock-tourney.html
            output_file = config_file.replace('config-', 'clock-').replace('.yml', '.html')
            
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(html)
            
            print(f"  Generated {output_file}")
        except Exception as e:
            print(f"  Error processing {config_file}: {e}")
    
    # Generate index page with links to all clocks
    print("\nGenerating index page...")
    index_html = generate_index_html(config_files)
    
    with open('index.html', 'w', encoding='utf-8') as f:
        f.write(index_html)
    
    print("Successfully generated index.html")
    print("\nOpen index.html in a web browser to select a tournament clock.")


if __name__ == '__main__':
    main()
